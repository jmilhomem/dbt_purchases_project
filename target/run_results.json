{"results": [{"node": {"raw_sql": "/*\n    Defines a stage table which mark the most recent row for offers when duplicated\n*/\n\nWITH source_data AS \n     (\n     SELECT offer \n            , category \n            , quantity \n            , company \n            , offervalue \n            , brand \n            , row_number () over (partition by brand, category, company \n                                  ORDER BY offer DESC) AS mostrecent\n       FROM {{ source('warehouse', 'offers') }}\n     )\n\nSELECT *\n  FROM source_data", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "staging", "stg_offers"], "unique_id": "model.purchases_project.stg_offers", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "staging/stg_offers.sql", "original_file_path": "models/staging/stg_offers.sql", "name": "stg_offers", "resource_type": "model", "alias": "stg_offers", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["warehouse", "offers"]], "depends_on": {"macros": [], "nodes": ["source.purchases_project.warehouse.offers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/staging/stg_offers.sql", "compiled": true, "compiled_sql": "/*\n    Defines a stage table which mark the most recent row for offers when duplicated\n*/\n\nWITH source_data AS \n     (\n     SELECT offer \n            , category \n            , quantity \n            , company \n            , offervalue \n            , brand \n            , row_number () over (partition by brand, category, company \n                                  ORDER BY offer DESC) AS mostrecent\n       FROM \"postgres\".\"warehouse\".\"offers\"\n     )\n\nSELECT *\n  FROM source_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a stage table which mark the most recent row for offers when duplicated\n*/\n\nWITH source_data AS \n     (\n     SELECT offer \n            , category \n            , quantity \n            , company \n            , offervalue \n            , brand \n            , row_number () over (partition by brand, category, company \n                                  ORDER BY offer DESC) AS mostrecent\n       FROM \"postgres\".\"warehouse\".\"offers\"\n     )\n\nSELECT *\n  FROM source_data", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.025109529495239258, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.563471Z", "completed_at": "2020-06-11T02:04:55.586756Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.587323Z", "completed_at": "2020-06-11T02:04:55.587342Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Defines a stage table which defines the return purchases\n*/\n\nwith source_data \n  as (\n     SELECT id\n            , dept\n            , chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , date\n            , productsize\n            , productmeasure\n            , purchasequantity\n            , purchaseamount\n            , case when purchaseamount < 0 then 'RETURN'\n                  else 'PURCHASE'\n              end purchasetype\n       FROM {{ source('warehouse', 'transactions') }} transactions\n     )\n\nselect *\n  from source_data", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "staging", "stg_transactions"], "unique_id": "model.purchases_project.stg_transactions", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "staging/stg_transactions.sql", "original_file_path": "models/staging/stg_transactions.sql", "name": "stg_transactions", "resource_type": "model", "alias": "stg_transactions", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [["warehouse", "transactions"]], "depends_on": {"macros": [], "nodes": ["source.purchases_project.warehouse.transactions"]}, "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The customer key for this table", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/schema.yml", "build_path": "target/compiled/purchases_project/staging/stg_transactions.sql", "compiled": true, "compiled_sql": "/*\n    Defines a stage table which defines the return purchases\n*/\n\nwith source_data \n  as (\n     SELECT id\n            , dept\n            , chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , date\n            , productsize\n            , productmeasure\n            , purchasequantity\n            , purchaseamount\n            , case when purchaseamount < 0 then 'RETURN'\n                  else 'PURCHASE'\n              end purchasetype\n       FROM \"postgres\".\"warehouse\".\"transactions\" transactions\n     )\n\nselect *\n  from source_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a stage table which defines the return purchases\n*/\n\nwith source_data \n  as (\n     SELECT id\n            , dept\n            , chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , date\n            , productsize\n            , productmeasure\n            , purchasequantity\n            , purchaseamount\n            , case when purchaseamount < 0 then 'RETURN'\n                  else 'PURCHASE'\n              end purchasetype\n       FROM \"postgres\".\"warehouse\".\"transactions\" transactions\n     )\n\nselect *\n  from source_data", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.011296749114990234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.588635Z", "completed_at": "2020-06-11T02:04:55.598695Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.598985Z", "completed_at": "2020-06-11T02:04:55.598997Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "offers"], "unique_id": "seed.purchases_project.offers", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "offers.csv", "original_file_path": "data/offers.csv", "name": "offers", "resource_type": "seed", "alias": "offers", "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "compiled": true, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "", "wrapped_sql": null, "seed_file_path": "/home/carol/repos/dbt_purchases_project/data/offers.csv"}, "error": null, "status": null, "execution_time": 0.01307225227355957, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.600605Z", "completed_at": "2020-06-11T02:04:55.612246Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.612561Z", "completed_at": "2020-06-11T02:04:55.612572Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "transactions"], "unique_id": "seed.purchases_project.transactions", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "transactions.csv", "original_file_path": "data/transactions.csv", "name": "transactions", "resource_type": "seed", "alias": "transactions", "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "compiled": true, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "", "wrapped_sql": null, "seed_file_path": "/home/carol/repos/dbt_purchases_project/data/transactions.csv"}, "error": null, "status": null, "execution_time": 0.006248950958251953, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.613653Z", "completed_at": "2020-06-11T02:04:55.618819Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.619146Z", "completed_at": "2020-06-11T02:04:55.619156Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Defines a final analytical flat table with offers data\n*/\n\nWITH offers AS \n     (\n     SELECT category\n            , company\n            , brand\n            , min(quantity) AS quantity\n            , MIN(offervalue) AS offervalue\n            , COUNT(offer) offerquantity\n       FROM {{ ref('stg_offers') }}\n       GROUP BY 1, 2, 3\n     )\n\nSELECT *\n  FROM offers", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "processed", "analytics_offers"], "unique_id": "model.purchases_project.analytics_offers", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "processed/analytics_offers.sql", "original_file_path": "models/processed/analytics_offers.sql", "name": "analytics_offers", "resource_type": "model", "alias": "analytics_offers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_offers"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.purchases_project.stg_offers"]}, "description": "The offer analytics table, which contains the consolidated result for offers", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/processed/schema.yml", "build_path": "target/compiled/purchases_project/processed/analytics_offers.sql", "compiled": true, "compiled_sql": "/*\n    Defines a final analytical flat table with offers data\n*/\n\nWITH offers AS \n     (\n     SELECT category\n            , company\n            , brand\n            , min(quantity) AS quantity\n            , MIN(offervalue) AS offervalue\n            , COUNT(offer) offerquantity\n       FROM \"postgres\".\"warehouse\".\"stg_offers\"\n       GROUP BY 1, 2, 3\n     )\n\nSELECT *\n  FROM offers", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a final analytical flat table with offers data\n*/\n\nWITH offers AS \n     (\n     SELECT category\n            , company\n            , brand\n            , min(quantity) AS quantity\n            , MIN(offervalue) AS offervalue\n            , COUNT(offer) offerquantity\n       FROM \"postgres\".\"warehouse\".\"stg_offers\"\n       GROUP BY 1, 2, 3\n     )\n\nSELECT *\n  FROM offers", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.007964611053466797, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.620198Z", "completed_at": "2020-06-11T02:04:55.627198Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.627468Z", "completed_at": "2020-06-11T02:04:55.627478Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Defines a stage table which defines the hadoffer and haddiscount flags \n*/\n\nWITH offers AS \n     (\n      SELECT *\n        FROM {{ ref('stg_offers') }}\n       WHERE mostrecent = 1\n     )\n     , source_data AS \n     (\n     SELECT transactions.id\n            , transactions.dept\n            , transactions.chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , transactions.date\n            , transactions.productsize\n            , transactions.productmeasure\n            , transactions.purchasequantity\n            , transactions.purchaseamount\n            , transactions.purchasetype\n            , CASE WHEN purchaseamount > 0\n                        AND offers.quantity IS NOT NULL THEN 'Yes'\n                   ELSE 'No'\n              END hadoffer\n            , CASE WHEN purchasequantity >= offers.quantity\n                        AND purchaseamount > 0\n                        THEN 'Yes'\n                   ELSE 'No'\n              END haddiscount\n       FROM {{ ref('stg_transactions') }} transactions\n            LEFT JOIN offers\n                   ON transactions.category = offers.category \n                  AND transactions.brand = offers.brand\n                  AND transactions.company = offers.company\n     )\n\nSELECT *\n  FROM source_data", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "staging", "stg_transactions_offers"], "unique_id": "model.purchases_project.stg_transactions_offers", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "staging/stg_transactions_offers.sql", "original_file_path": "models/staging/stg_transactions_offers.sql", "name": "stg_transactions_offers", "resource_type": "model", "alias": "stg_transactions_offers", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_offers"], ["stg_transactions"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.purchases_project.stg_offers", "model.purchases_project.stg_transactions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/staging/stg_transactions_offers.sql", "compiled": true, "compiled_sql": "/*\n    Defines a stage table which defines the hadoffer and haddiscount flags \n*/\n\nWITH offers AS \n     (\n      SELECT *\n        FROM \"postgres\".\"warehouse\".\"stg_offers\"\n       WHERE mostrecent = 1\n     )\n     , source_data AS \n     (\n     SELECT transactions.id\n            , transactions.dept\n            , transactions.chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , transactions.date\n            , transactions.productsize\n            , transactions.productmeasure\n            , transactions.purchasequantity\n            , transactions.purchaseamount\n            , transactions.purchasetype\n            , CASE WHEN purchaseamount > 0\n                        AND offers.quantity IS NOT NULL THEN 'Yes'\n                   ELSE 'No'\n              END hadoffer\n            , CASE WHEN purchasequantity >= offers.quantity\n                        AND purchaseamount > 0\n                        THEN 'Yes'\n                   ELSE 'No'\n              END haddiscount\n       FROM \"postgres\".\"warehouse\".\"stg_transactions\" transactions\n            LEFT JOIN offers\n                   ON transactions.category = offers.category \n                  AND transactions.brand = offers.brand\n                  AND transactions.company = offers.company\n     )\n\nSELECT *\n  FROM source_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a stage table which defines the hadoffer and haddiscount flags \n*/\n\nWITH offers AS \n     (\n      SELECT *\n        FROM \"postgres\".\"warehouse\".\"stg_offers\"\n       WHERE mostrecent = 1\n     )\n     , source_data AS \n     (\n     SELECT transactions.id\n            , transactions.dept\n            , transactions.chain\n            , transactions.category\n            , transactions.company\n            , transactions.brand\n            , transactions.date\n            , transactions.productsize\n            , transactions.productmeasure\n            , transactions.purchasequantity\n            , transactions.purchaseamount\n            , transactions.purchasetype\n            , CASE WHEN purchaseamount > 0\n                        AND offers.quantity IS NOT NULL THEN 'Yes'\n                   ELSE 'No'\n              END hadoffer\n            , CASE WHEN purchasequantity >= offers.quantity\n                        AND purchaseamount > 0\n                        THEN 'Yes'\n                   ELSE 'No'\n              END haddiscount\n       FROM \"postgres\".\"warehouse\".\"stg_transactions\" transactions\n            LEFT JOIN offers\n                   ON transactions.category = offers.category \n                  AND transactions.brand = offers.brand\n                  AND transactions.company = offers.company\n     )\n\nSELECT *\n  FROM source_data", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.00968027114868164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.628721Z", "completed_at": "2020-06-11T02:04:55.637256Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.637504Z", "completed_at": "2020-06-11T02:04:55.637513Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('stg_transactions'), column_name='id') }}", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "schema_test", "not_null_stg_transactions_id"], "unique_id": "test.purchases_project.not_null_stg_transactions_id", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "schema_test/not_null_stg_transactions_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_transactions_id", "resource_type": "test", "alias": "not_null_stg_transactions_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_transactions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.purchases_project.stg_transactions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/schema_test/not_null_stg_transactions_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"stg_transactions\"\nwhere id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"stg_transactions\"\nwhere id is null\n\n", "wrapped_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"stg_transactions\"\nwhere id is null\n\n", "column_name": "id", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id"}}}, "error": null, "status": null, "execution_time": 0.017721176147460938, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.638790Z", "completed_at": "2020-06-11T02:04:55.655072Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.655545Z", "completed_at": "2020-06-11T02:04:55.655572Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('analytics_offers'), column_name='concat(category, company, brand)') }}", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "schema_test", "not_null_analytics_offers_concat_category_company_brand_"], "unique_id": "test.purchases_project.not_null_analytics_offers_concat_category_company_brand_", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "schema_test/not_null_analytics_offers_concat_category_company_brand_.sql", "original_file_path": "models/processed/schema.yml", "name": "not_null_analytics_offers_concat_category_company_brand_", "resource_type": "test", "alias": "not_null_analytics_offers_concat_category_company_brand_", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["analytics_offers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.purchases_project.analytics_offers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/schema_test/not_null_analytics_offers_concat_category_company_brand_.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_offers\"\nwhere concat(category, company, brand) is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_offers\"\nwhere concat(category, company, brand) is null\n\n", "wrapped_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_offers\"\nwhere concat(category, company, brand) is null\n\n", "column_name": null, "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "concat(category, company, brand)"}}}, "error": null, "status": null, "execution_time": 0.010608911514282227, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.656821Z", "completed_at": "2020-06-11T02:04:55.666451Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.666724Z", "completed_at": "2020-06-11T02:04:55.666735Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('analytics_offers'), column_name='concat(category, company, brand)') }}", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "schema_test", "unique_analytics_offers_concat_category_company_brand_"], "unique_id": "test.purchases_project.unique_analytics_offers_concat_category_company_brand_", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "schema_test/unique_analytics_offers_concat_category_company_brand_.sql", "original_file_path": "models/processed/schema.yml", "name": "unique_analytics_offers_concat_category_company_brand_", "resource_type": "test", "alias": "unique_analytics_offers_concat_category_company_brand_", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["analytics_offers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.purchases_project.analytics_offers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/schema_test/unique_analytics_offers_concat_category_company_brand_.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        concat(category, company, brand)\n\n    from \"postgres\".\"warehouse\".\"analytics_offers\"\n    where concat(category, company, brand) is not null\n    group by concat(category, company, brand)\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        concat(category, company, brand)\n\n    from \"postgres\".\"warehouse\".\"analytics_offers\"\n    where concat(category, company, brand) is not null\n    group by concat(category, company, brand)\n    having count(*) > 1\n\n) validation_errors\n\n", "wrapped_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        concat(category, company, brand)\n\n    from \"postgres\".\"warehouse\".\"analytics_offers\"\n    where concat(category, company, brand) is not null\n    group by concat(category, company, brand)\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": null, "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "concat(category, company, brand)"}}}, "error": null, "status": null, "execution_time": 0.009542703628540039, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.667819Z", "completed_at": "2020-06-11T02:04:55.676313Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.676571Z", "completed_at": "2020-06-11T02:04:55.676582Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Defines a final analytical flat table with transactions data\n*/\n\nSELECT *\n  FROM {{ ref('stg_transactions_offers') }}", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "processed", "analytics_transactions"], "unique_id": "model.purchases_project.analytics_transactions", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "processed/analytics_transactions.sql", "original_file_path": "models/processed/analytics_transactions.sql", "name": "analytics_transactions", "resource_type": "model", "alias": "analytics_transactions", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_transactions_offers"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.purchases_project.stg_transactions_offers"]}, "description": "The transaction analytics table, which contains the analytical transaction data", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/processed/schema.yml", "build_path": "target/compiled/purchases_project/processed/analytics_transactions.sql", "compiled": true, "compiled_sql": "/*\n    Defines a final analytical flat table with transactions data\n*/\n\nSELECT *\n  FROM \"postgres\".\"warehouse\".\"stg_transactions_offers\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a final analytical flat table with transactions data\n*/\n\nSELECT *\n  FROM \"postgres\".\"warehouse\".\"stg_transactions_offers\"", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.00772547721862793, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.677551Z", "completed_at": "2020-06-11T02:04:55.684411Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.684654Z", "completed_at": "2020-06-11T02:04:55.684664Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Defines a final analytical flat table with transactions data by yearmonth\n*/\n\nSELECT id\n       , category\n       , company\n       , brand\n       , to_char(date, 'YYYYMM') AS yearmonth\n       , purchasetype\n       , hadoffer\n       , haddiscount\n       , SUM(purchaseamount) AS purchaseamount\n       , SUM(purchasequantity) AS purchasequantity\n  FROM {{ ref('stg_transactions_offers') }}\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "processed", "analytics_transactions_yearmonth"], "unique_id": "model.purchases_project.analytics_transactions_yearmonth", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "processed/analytics_transactions_yearmonth.sql", "original_file_path": "models/processed/analytics_transactions_yearmonth.sql", "name": "analytics_transactions_yearmonth", "resource_type": "model", "alias": "analytics_transactions_yearmonth", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_transactions_offers"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.purchases_project.stg_transactions_offers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/processed/analytics_transactions_yearmonth.sql", "compiled": true, "compiled_sql": "/*\n    Defines a final analytical flat table with transactions data by yearmonth\n*/\n\nSELECT id\n       , category\n       , company\n       , brand\n       , to_char(date, 'YYYYMM') AS yearmonth\n       , purchasetype\n       , hadoffer\n       , haddiscount\n       , SUM(purchaseamount) AS purchaseamount\n       , SUM(purchasequantity) AS purchasequantity\n  FROM \"postgres\".\"warehouse\".\"stg_transactions_offers\"\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Defines a final analytical flat table with transactions data by yearmonth\n*/\n\nSELECT id\n       , category\n       , company\n       , brand\n       , to_char(date, 'YYYYMM') AS yearmonth\n       , purchasetype\n       , hadoffer\n       , haddiscount\n       , SUM(purchaseamount) AS purchaseamount\n       , SUM(purchasequantity) AS purchasequantity\n  FROM \"postgres\".\"warehouse\".\"stg_transactions_offers\"\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.007972002029418945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.685801Z", "completed_at": "2020-06-11T02:04:55.692715Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.692969Z", "completed_at": "2020-06-11T02:04:55.692981Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('analytics_transactions'), column_name='concat(id, category, company, brand)') }}", "database": "postgres", "schema": "warehouse", "fqn": ["purchases_project", "schema_test", "not_null_analytics_transactions_concat_id_category_company_brand_"], "unique_id": "test.purchases_project.not_null_analytics_transactions_concat_id_category_company_brand_", "package_name": "purchases_project", "root_path": "/home/carol/repos/dbt_purchases_project", "path": "schema_test/not_null_analytics_transactions_35cc3800e0a9c5e7db574664b832a97b.sql", "original_file_path": "models/processed/schema.yml", "name": "not_null_analytics_transactions_concat_id_category_company_brand_", "resource_type": "test", "alias": "not_null_analytics_transactions_concat_id_category_company_brand_", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["analytics_transactions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.purchases_project.analytics_transactions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/purchases_project/schema_test/not_null_analytics_transactions_35cc3800e0a9c5e7db574664b832a97b.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_transactions\"\nwhere concat(id, category, company, brand) is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_transactions\"\nwhere concat(id, category, company, brand) is null\n\n", "wrapped_sql": "\n\n\n\nselect count(*)\nfrom \"postgres\".\"warehouse\".\"analytics_transactions\"\nwhere concat(id, category, company, brand) is null\n\n", "column_name": null, "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "concat(id, category, company, brand)"}}}, "error": null, "status": null, "execution_time": 0.00983285903930664, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-06-11T02:04:55.694013Z", "completed_at": "2020-06-11T02:04:55.702890Z"}, {"name": "execute", "started_at": "2020-06-11T02:04:55.703156Z", "completed_at": "2020-06-11T02:04:55.703167Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-06-11T02:04:55.767473Z", "elapsed_time": 0.2066059112548828}